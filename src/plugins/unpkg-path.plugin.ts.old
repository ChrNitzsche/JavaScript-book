import axios from 'axios';
import * as esbuild from 'esbuild-wasm';
import localForage from 'localforage';

const clog = false;

const fileCache = localForage.createInstance({
   name: 'filecache',
});

/* Umgang mit localForage
      (async () => {
         await fileCache.setItem('color', 'red');
         const color = await fileCache.getItem('color');
         console.log(color);
         await fileCache.clear();
      })();
   -> onLoad
*/
     
export const unpkgPathPlugin = (inputCode: string) => {
   return {
      name: 'unpkg-path-plugin',
      setup(build: esbuild.PluginBuild) {
         build.onResolve({ filter: /.*/ }, async (args: any) => {
            console.log('onResole', args);
            if (args.path === 'index.js') {
               return { path: args.path, namespace: 'a' };
            }

            // args.path can result in ('./utils') => https://unpkg.com/./utils <- false behaviuor!
            if (args.path.includes('./') || args.path.includes('../')) {
               return {
                  namespace: 'a',
                  path: new URL(args.path, 'https://unpkg.com' + args.resolveDir + '/').href
               }
            }
            
            return {
               namespace: 'a',
               path: `https://unpkg.com/${args.path}`
            }
         });

// #######################################################################

         build.onLoad({ filter: /.*/ }, async (args: any) => {
            console.log('onLoad', args);

            
            if (args.path === 'index.js') {
               return {
                  loader: 'jsx',
                  // import message from 'tiny-test-pkg';   // -> using ES-modules -> receiving a lot of more code
                  // better, because using the same export-methods, instead of mixing ES-modules und CommonJS-modules:
                  contents: inputCode
               };
            }

            // Check, if we already fetched the file
            const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);
            // if file in change -> return immediately
            if (cachedResult) {
               return cachedResult;
            }

            
            const { data, request } = await axios.get(args.path);
                                                                     if (clog) console.log('onLoad.data =', data);
                                                                     if (clog) console.log('request =', request);
            const result: esbuild.OnLoadResult = {
               loader: 'jsx',
               contents: data,
               resolveDir: new URL('./', request.responseURL).pathname
            };
            // store response in IndexedDB
            await fileCache.setItem(args.path, result);
            
            return result
         });
      },
   };
};